//
//  RelicStyleKit.swift
//  RelicGenerator
//
//  Created by Mitchell Hudson on 1/1/16.
//  Copyright (c) 2016 Mitchell Hudson. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class RelicStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let strokeColor: UIColor = UIColor(red: 0.594, green: 0.594, blue: 0.594, alpha: 1.000)
        static let frameStrokeColor: UIColor = UIColor(red: 0.564, green: 0.564, blue: 0.564, alpha: 1.000)
        static let frameFillColor: UIColor = UIColor(red: 0.652, green: 0.800, blue: 0.320, alpha: 0.000)
    }

    //// Colors

    public class var strokeColor: UIColor { return Cache.strokeColor }
    public class var frameStrokeColor: UIColor { return Cache.frameStrokeColor }
    public class var frameFillColor: UIColor { return Cache.frameFillColor }

    //// Drawing Methods

    public class func drawCanvas1(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group2: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group 2
        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group2.minX + floor(group2.width * 0.00000 + 0.5), group2.minY + floor(group2.height * 0.00000 + 0.5), floor(group2.width * 1.00000 + 0.5) - floor(group2.width * 0.00000 + 0.5), floor(group2.height * 1.00000 + 0.5) - floor(group2.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(group2.minX + floor(group2.width * 0.14286 + 0.5), group2.minY + floor(group2.height * 0.30952 + 0.5), floor(group2.width * 0.85714 + 0.5) - floor(group2.width * 0.14286 + 0.5), floor(group2.height * 0.69048 + 0.5) - floor(group2.height * 0.30952 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawCanvas30(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas2(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.19048 + 0.5), group.minY + floor(group.height * 0.21429 + 0.5), floor(group.width * 0.78571 + 0.5) - floor(group.width * 0.19048 + 0.5), floor(group.height * 0.78571 + 0.5) - floor(group.height * 0.21429 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawCanvas31(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas3(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.16667 + 0.5), group.minY + floor(group.height * 0.16667 + 0.5), floor(group.width * 0.83333 + 0.5) - floor(group.width * 0.16667 + 0.5), floor(group.height * 0.83333 + 0.5) - floor(group.height * 0.16667 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawCanvas32(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas4(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.19048 + 0.5), group.minY + floor(group.height * 0.19048 + 0.5), floor(group.width * 0.80952 + 0.5) - floor(group.width * 0.19048 + 0.5), floor(group.height * 0.80952 + 0.5) - floor(group.height * 0.19048 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawCanvas33(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas5(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 1.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5))


        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.33333 + 0.5), group.minY + floor(group.height * 0.16667 + 0.5), floor(group.width * 0.69048 + 0.5) - floor(group.width * 0.33333 + 0.5), floor(group.height * 0.83333 + 0.5) - floor(group.height * 0.16667 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawCanvas36(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas6(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.19048 + 0.5), group.minY + floor(group.height * 0.16667 + 0.5), floor(group.width * 0.83333 + 0.5) - floor(group.width * 0.19048 + 0.5), floor(group.height * 0.80952 + 0.5) - floor(group.height * 0.16667 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawCanvas37(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas7(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.14286 + 0.5), group.minY + floor(group.height * 0.14286 + 0.5), floor(group.width * 0.85714 + 0.5) - floor(group.width * 0.14286 + 0.5), floor(group.height * 0.85714 + 0.5) - floor(group.height * 0.14286 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas38(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas8(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group


        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 4, frame.minY + 10, 34, 22)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas39(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas9(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.19048 + 0.5), group.minY + floor(group.height * 0.16667 + 0.5), floor(group.width * 0.83333 + 0.5) - floor(group.width * 0.19048 + 0.5), floor(group.height * 0.83333 + 0.5) - floor(group.height * 0.16667 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas42(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas10(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.14286 + 0.5), group.minY + floor(group.height * 0.09524 + 0.5), floor(group.width * 0.85714 + 0.5) - floor(group.width * 0.14286 + 0.5), floor(group.height * 0.90476 + 0.5) - floor(group.height * 0.09524 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas43(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas11(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.23810 + 0.5), group.minY + floor(group.height * 0.21429 + 0.5), floor(group.width * 0.78571 + 0.5) - floor(group.width * 0.23810 + 0.5), floor(group.height * 0.78571 + 0.5) - floor(group.height * 0.21429 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas52(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas12(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group


        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 11, frame.minY + 5, 21, 31)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas53(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas13(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.23810 + 0.5), group.minY + floor(group.height * 0.16667 + 0.5), floor(group.width * 0.76190 + 0.5) - floor(group.width * 0.23810 + 0.5), floor(group.height * 0.83333 + 0.5) - floor(group.height * 0.16667 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas44(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas14(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 10, frame.minY + 9, 23, 24)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas46(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas15(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group 2
        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 7, frame.minY + 5, 29, 31)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas29(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas16(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.35714 + 0.5), group.minY + floor(group.height * 0.16667 + 0.5), floor(group.width * 0.64286 + 0.5) - floor(group.width * 0.35714 + 0.5), floor(group.height * 0.83333 + 0.5) - floor(group.height * 0.16667 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas54(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas17(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.23810 + 0.5), group.minY + floor(group.height * 0.19048 + 0.5), floor(group.width * 0.78571 + 0.5) - floor(group.width * 0.23810 + 0.5), floor(group.height * 0.78571 + 0.5) - floor(group.height * 0.19048 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawCanvas34(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas18(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.16667 + 0.5), group.minY + floor(group.height * 0.21429 + 0.5), floor(group.width * 0.83333 + 0.5) - floor(group.width * 0.16667 + 0.5), floor(group.height * 0.78571 + 0.5) - floor(group.height * 0.21429 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas40(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas19(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.16667 + 0.5), group.minY + floor(group.height * 0.21429 + 0.5), floor(group.width * 0.83333 + 0.5) - floor(group.width * 0.16667 + 0.5), floor(group.height * 0.76190 + 0.5) - floor(group.height * 0.21429 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas55(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas20(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.33333 + 0.5), group.minY + floor(group.height * 0.14286 + 0.5), floor(group.width * 0.66667 + 0.5) - floor(group.width * 0.33333 + 0.5), floor(group.height * 0.83333 + 0.5) - floor(group.height * 0.14286 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas57(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas21(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group


        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 14, frame.minY + 6, 14, 30)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas58(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas22(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.09524 + 0.5), group.minY + floor(group.height * 0.30952 + 0.5), floor(group.width * 0.90476 + 0.5) - floor(group.width * 0.09524 + 0.5), floor(group.height * 0.73810 + 0.5) - floor(group.height * 0.30952 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas56(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas23(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)



        //// Symbol Drawing
        let symbolRect = CGRectMake(-21, -21, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(-14, -14, 28, 28)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas41(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawCanvas24(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.28571 + 0.5), group.minY + floor(group.height * 0.26190 + 0.5), floor(group.width * 0.71429 + 0.5) - floor(group.width * 0.28571 + 0.5), floor(group.height * 0.71429 + 0.5) - floor(group.height * 0.26190 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawCanvas35(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas25(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 7, frame.minY + 12, 29, 18)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas48(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas26(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + floor(group.width * 0.42857 + 0.5), group.minY + floor(group.height * 0.26190 + 0.5), floor(group.width * 0.59524 + 0.5) - floor(group.width * 0.42857 + 0.5), floor(group.height * 0.73810 + 0.5) - floor(group.height * 0.26190 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas49(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas27(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group


        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 15, frame.minY + 8, 13, 25)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas50(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas28(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor((frame.width - 42) / 2 + 0.5), frame.minY + floor((frame.height - 42) / 2 + 0.5), 42, 42)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRectMake(group.minX, group.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(group.minX + 13, group.minY + 7, 17, 28)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas51(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas30(frame frame: CGRect = CGRectMake(6, 13, 30, 16)) {


        //// Subframes
        let group2: CGRect = CGRectMake(frame.minX + 1, frame.minY + 1, frame.width - 2, frame.height - 2)


        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group2.minX + 0.25000 * group2.width, group2.minY + 1.00000 * group2.height))
        bezierPath.addCurveToPoint(CGPointMake(group2.minX + 0.50000 * group2.width, group2.minY + 0.50000 * group2.height), controlPoint1: CGPointMake(group2.minX + 0.38807 * group2.width, group2.minY + 1.00000 * group2.height), controlPoint2: CGPointMake(group2.minX + 0.50000 * group2.width, group2.minY + 0.77614 * group2.height))
        bezierPath.addCurveToPoint(CGPointMake(group2.minX + 0.25000 * group2.width, group2.minY + 0.00000 * group2.height), controlPoint1: CGPointMake(group2.minX + 0.50000 * group2.width, group2.minY + 0.22386 * group2.height), controlPoint2: CGPointMake(group2.minX + 0.38807 * group2.width, group2.minY + 0.00000 * group2.height))
        bezierPath.addCurveToPoint(CGPointMake(group2.minX + 0.00000 * group2.width, group2.minY + 0.50000 * group2.height), controlPoint1: CGPointMake(group2.minX + 0.11193 * group2.width, group2.minY + 0.00000 * group2.height), controlPoint2: CGPointMake(group2.minX + 0.00000 * group2.width, group2.minY + 0.22386 * group2.height))
        bezierPath.addCurveToPoint(CGPointMake(group2.minX + 0.25000 * group2.width, group2.minY + 1.00000 * group2.height), controlPoint1: CGPointMake(group2.minX + 0.00000 * group2.width, group2.minY + 0.77614 * group2.height), controlPoint2: CGPointMake(group2.minX + 0.11193 * group2.width, group2.minY + 1.00000 * group2.height))
        bezierPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group2.minX + floor(group2.width * 0.50000 + 0.5), group2.minY + floor(group2.height * 0.00000 + 0.5), floor(group2.width * 1.00000 + 0.5) - floor(group2.width * 0.50000 + 0.5), floor(group2.height * 1.00000 + 0.5) - floor(group2.height * 0.00000 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()
    }

    public class func drawCanvas31(frame frame: CGRect = CGRectMake(8, 8, 25, 24)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.5, frame.minY + 0.5, frame.width - 2.5, frame.height - 1.5)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.51111 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.51111 * group.height))
        bezierPath.lineCapStyle = .Square;

        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.51111 * group.width, group.minY + 0.00000 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.51111 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.lineCapStyle = .Square;

        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()
    }

    public class func drawCanvas32(frame frame: CGRect = CGRectMake(7, 7, 28, 28)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY + 1, frame.width - 2, frame.height - 2)


        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(group.minX + floor(group.width * 0.26923 + 0.5), group.minY + floor(group.height * 0.26923 + 0.5), floor(group.width * 0.73077 + 0.5) - floor(group.width * 0.26923 + 0.5), floor(group.height * 0.73077 + 0.5) - floor(group.height * 0.26923 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
    }

    public class func drawCanvas33(frame frame: CGRect = CGRectMake(8, 8, 26, 26)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY + 1, frame.width - 2, frame.height - 2)


        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.29167 + 0.5), group.minY + floor(group.height * 0.29167 + 0.5), floor(group.width * 0.75000 + 0.5) - floor(group.width * 0.29167 + 0.5), floor(group.height * 0.75000 + 0.5) - floor(group.height * 0.29167 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
    }

    public class func drawCanvas34(frame frame: CGRect = CGRectMake(10, 8, 23, 25)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY + 1, frame.width - 2.5, frame.height - 2.5)


        //// Group
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.19512 + 0.5), group.minY + floor(group.height * 0.40000) + 0.5, floor(group.width * 0.39024 + 0.5) - floor(group.width * 0.19512 + 0.5), floor(group.height * 0.57778) - floor(group.height * 0.40000)))
        RelicStyleKit.strokeColor.setStroke()
        oval3Path.lineWidth = 2
        oval3Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.58537 + 0.5), group.minY + floor(group.height * 0.40000) + 0.5, floor(group.width * 0.78049 + 0.5) - floor(group.width * 0.58537 + 0.5), floor(group.height * 0.57778) - floor(group.height * 0.40000)))
        RelicStyleKit.strokeColor.setStroke()
        oval4Path.lineWidth = 2
        oval4Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.42857 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.72224 * group.width, group.minY + 0.81259 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.59684 * group.height), controlPoint2: CGPointMake(group.minX + 0.88687 * group.width, group.minY + 0.74246 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.72222 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.72222 * group.width, group.minY + 0.90221 * group.height), controlPoint2: CGPointMake(group.minX + 0.72222 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.27778 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.27778 * group.width, group.minY + 0.81256 * group.height), controlPoint1: CGPointMake(group.minX + 0.27778 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.27778 * group.width, group.minY + 0.90221 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.42857 * group.height), controlPoint1: CGPointMake(group.minX + 0.11313 * group.width, group.minY + 0.74246 * group.height), controlPoint2: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.59684 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.25212 * group.width, group.minY + 0.05629 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.26919 * group.height), controlPoint2: CGPointMake(group.minX + 0.10150 * group.width, group.minY + 0.13013 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.32518 * group.width, group.minY + 0.02047 * group.height), controlPoint2: CGPointMake(group.minX + 0.40980 * group.width, group.minY + 0.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.42857 * group.height), controlPoint1: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.19188 * group.height))
        bezierPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawCanvas35(frame frame: CGRect = CGRectMake(12, 11, 18, 19)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY + 1, frame.width - 2.04, frame.height - 2)


        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.46932 * group.height))
        oval2Path.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.46932 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.72853 * group.height), controlPoint2: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.72853 * group.height))
        oval2Path.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.21012 * group.height), controlPoint2: CGPointMake(group.minX + 0.22386 * group.width, group.minY + 0.00000 * group.height))
        oval2Path.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.46932 * group.height), controlPoint1: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.21012 * group.height))
        oval2Path.closePath()
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(group.minX + 0.34468 * group.width, group.minY + 0.64706 * group.height))
        rectanglePath.addLineToPoint(CGPointMake(group.minX + 0.34468 * group.width, group.minY + 1.00000 * group.height))
        rectanglePath.addLineToPoint(CGPointMake(group.minX + 0.65802 * group.width, group.minY + 1.00000 * group.height))
        rectanglePath.addLineToPoint(CGPointMake(group.minX + 0.65802 * group.width, group.minY + 0.64706 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
    }

    public class func drawCanvas36(frame frame: CGRect = CGRectMake(13, 7, 15, 28)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.5, frame.minY + 1.5, frame.width - 3, frame.height - 2.98)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.49250 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.17851 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.28893 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.69606 * group.height), controlPoint2: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.77219 * group.height))
        bezierPath.lineCapStyle = .Square;

        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.50750 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.82149 * group.height), controlPoint2: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.71107 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.30394 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.22781 * group.height))
        bezier2Path.lineCapStyle = .Square;

        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()
    }

    public class func drawIconFrame(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(frame.minX + floor((frame.width - 1) * 0.02439 + 0.5), frame.minY + 1, frame.width - 1 - floor((frame.width - 1) * 0.02439 + 0.5), floor((frame.height - 1) * 0.97561 + 0.5)), cornerRadius: 16)
        RelicStyleKit.frameFillColor.setFill()
        rectanglePath.fill()
        RelicStyleKit.frameStrokeColor.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
    }

    public class func drawCanvas37(frame frame: CGRect = CGRectMake(7, 7, 27, 27)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.49, frame.minY + 0.99, frame.width - 2.27, frame.height - 2.27)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.92893 * group.width, group.minY + 0.41421 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.92893 * group.width, group.minY + 0.07107 * group.height), controlPoint1: CGPointMake(group.minX + 1.02369 * group.width, group.minY + 0.31946 * group.height), controlPoint2: CGPointMake(group.minX + 1.02369 * group.width, group.minY + 0.16582 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.58579 * group.width, group.minY + 0.07107 * group.height), controlPoint1: CGPointMake(group.minX + 0.83418 * group.width, group.minY + -0.02369 * group.height), controlPoint2: CGPointMake(group.minX + 0.68054 * group.width, group.minY + -0.02369 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.32843 * group.width, group.minY + 0.32843 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.67157 * group.width, group.minY + 0.67157 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.92893 * group.width, group.minY + 0.41421 * group.height))
        bezierPath.closePath()
        bezierPath.miterLimit = 10;

        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.07107 * group.width, group.minY + 0.58579 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.07107 * group.width, group.minY + 0.92893 * group.height), controlPoint1: CGPointMake(group.minX + -0.02369 * group.width, group.minY + 0.68054 * group.height), controlPoint2: CGPointMake(group.minX + -0.02369 * group.width, group.minY + 0.83418 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.41421 * group.width, group.minY + 0.92893 * group.height), controlPoint1: CGPointMake(group.minX + 0.16582 * group.width, group.minY + 1.02369 * group.height), controlPoint2: CGPointMake(group.minX + 0.31946 * group.width, group.minY + 1.02369 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.67157 * group.width, group.minY + 0.67157 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.32843 * group.width, group.minY + 0.32843 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.07107 * group.width, group.minY + 0.58579 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.07107 * group.width, group.minY + 0.58579 * group.height))
        bezier2Path.closePath()
        bezier2Path.miterLimit = 10;

        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()
    }

    public class func drawCanvas38(frame frame: CGRect = CGRectMake(6, 6, 30, 30)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.6, frame.minY + 1, frame.width - 3.21, frame.height - 2)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.35070 * group.width, group.minY + 0.13392 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.35070 * group.width, group.minY + 0.07112 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.42528 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.35070 * group.width, group.minY + 0.03184 * group.height), controlPoint2: CGPointMake(group.minX + 0.38380 * group.width, group.minY + 0.00000 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.57472 * group.width, group.minY + 0.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.64930 * group.width, group.minY + 0.07112 * group.height), controlPoint1: CGPointMake(group.minX + 0.61591 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.64930 * group.width, group.minY + 0.03214 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.64930 * group.width, group.minY + 0.13392 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.75659 * group.width, group.minY + 0.19329 * group.height), controlPoint1: CGPointMake(group.minX + 0.68832 * group.width, group.minY + 0.14850 * group.height), controlPoint2: CGPointMake(group.minX + 0.72444 * group.width, group.minY + 0.16863 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.81352 * group.width, group.minY + 0.16184 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.91518 * group.width, group.minY + 0.18808 * group.height), controlPoint1: CGPointMake(group.minX + 0.84907 * group.width, group.minY + 0.14220 * group.height), controlPoint2: CGPointMake(group.minX + 0.89444 * group.width, group.minY + 0.15371 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.98990 * group.width, group.minY + 0.31192 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.96282 * group.width, group.minY + 0.40928 * group.height), controlPoint1: CGPointMake(group.minX + 1.01050 * group.width, group.minY + 0.34605 * group.height), controlPoint2: CGPointMake(group.minX + 0.99810 * group.width, group.minY + 0.38979 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.90593 * group.width, group.minY + 0.44071 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.91057 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.90899 * group.width, group.minY + 0.46005 * group.height), controlPoint2: CGPointMake(group.minX + 0.91057 * group.width, group.minY + 0.47985 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.90593 * group.width, group.minY + 0.55929 * group.height), controlPoint1: CGPointMake(group.minX + 0.91057 * group.width, group.minY + 0.52015 * group.height), controlPoint2: CGPointMake(group.minX + 0.90899 * group.width, group.minY + 0.53996 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.96282 * group.width, group.minY + 0.59072 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.98990 * group.width, group.minY + 0.68808 * group.height), controlPoint1: CGPointMake(group.minX + 0.99837 * group.width, group.minY + 0.61036 * group.height), controlPoint2: CGPointMake(group.minX + 1.01064 * group.width, group.minY + 0.65371 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.91518 * group.width, group.minY + 0.81192 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.81352 * group.width, group.minY + 0.83816 * group.height), controlPoint1: CGPointMake(group.minX + 0.89459 * group.width, group.minY + 0.84605 * group.height), controlPoint2: CGPointMake(group.minX + 0.84880 * group.width, group.minY + 0.85765 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.75659 * group.width, group.minY + 0.80671 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.64930 * group.width, group.minY + 0.86608 * group.height), controlPoint1: CGPointMake(group.minX + 0.72444 * group.width, group.minY + 0.83137 * group.height), controlPoint2: CGPointMake(group.minX + 0.68832 * group.width, group.minY + 0.85150 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.64930 * group.width, group.minY + 0.92888 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.57472 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.64930 * group.width, group.minY + 0.96816 * group.height), controlPoint2: CGPointMake(group.minX + 0.61620 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.42528 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.35070 * group.width, group.minY + 0.92888 * group.height), controlPoint1: CGPointMake(group.minX + 0.38409 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.35070 * group.width, group.minY + 0.96786 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.35070 * group.width, group.minY + 0.86608 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.24341 * group.width, group.minY + 0.80671 * group.height), controlPoint1: CGPointMake(group.minX + 0.31168 * group.width, group.minY + 0.85150 * group.height), controlPoint2: CGPointMake(group.minX + 0.27556 * group.width, group.minY + 0.83137 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.18647 * group.width, group.minY + 0.83816 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.08482 * group.width, group.minY + 0.81192 * group.height), controlPoint1: CGPointMake(group.minX + 0.15093 * group.width, group.minY + 0.85780 * group.height), controlPoint2: CGPointMake(group.minX + 0.10556 * group.width, group.minY + 0.84629 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.01010 * group.width, group.minY + 0.68808 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.03718 * group.width, group.minY + 0.59072 * group.height), controlPoint1: CGPointMake(group.minX + -0.01050 * group.width, group.minY + 0.65395 * group.height), controlPoint2: CGPointMake(group.minX + 0.00190 * group.width, group.minY + 0.61021 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.09407 * group.width, group.minY + 0.55929 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.08943 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.09101 * group.width, group.minY + 0.53996 * group.height), controlPoint2: CGPointMake(group.minX + 0.08943 * group.width, group.minY + 0.52015 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.09407 * group.width, group.minY + 0.44071 * group.height), controlPoint1: CGPointMake(group.minX + 0.08943 * group.width, group.minY + 0.47985 * group.height), controlPoint2: CGPointMake(group.minX + 0.09101 * group.width, group.minY + 0.46005 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.03718 * group.width, group.minY + 0.40928 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.01010 * group.width, group.minY + 0.31192 * group.height), controlPoint1: CGPointMake(group.minX + 0.00163 * group.width, group.minY + 0.38964 * group.height), controlPoint2: CGPointMake(group.minX + -0.01064 * group.width, group.minY + 0.34629 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.08482 * group.width, group.minY + 0.18808 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.18647 * group.width, group.minY + 0.16184 * group.height), controlPoint1: CGPointMake(group.minX + 0.10541 * group.width, group.minY + 0.15395 * group.height), controlPoint2: CGPointMake(group.minX + 0.15120 * group.width, group.minY + 0.14235 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.24341 * group.width, group.minY + 0.19329 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.35070 * group.width, group.minY + 0.13392 * group.height), controlPoint1: CGPointMake(group.minX + 0.27556 * group.width, group.minY + 0.16863 * group.height), controlPoint2: CGPointMake(group.minX + 0.31168 * group.width, group.minY + 0.14850 * group.height))
        bezierPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.35070 + 0.1) + 0.4, group.minY + floor(group.height * 0.35714 + 0.5), floor(group.width * 0.64930 + 0.1) - floor(group.width * 0.35070 + 0.1), floor(group.height * 0.64286 + 0.5) - floor(group.height * 0.35714 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()
    }

    public class func drawCanvas39(frame frame: CGRect = CGRectMake(4, 9, 34, 22)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 2.15, frame.minY + 1, frame.width - 4.3, frame.height - 1.95)


        //// Group
        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.59601 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.19202 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.59601 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 1.00000 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.59601 * group.height))
        starPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        starPath.lineWidth = 2
        starPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.33165 - 0.35) + 0.85, group.minY + floor(group.height * 0.00000 + 0.45) + 0.05, floor(group.width * 0.66835 - 0.35) - floor(group.width * 0.33165 - 0.35), floor(group.height * 0.49875 + 0.45) - floor(group.height * 0.00000 + 0.45)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()
    }

    public class func drawCanvas40(frame frame: CGRect = CGRectMake(7, 10, 28, 24)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.03, frame.minY, frame.width - 2.06, frame.height - 1)


        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.56522 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.73128 * group.width, group.minY + 0.83283 * group.height), controlPoint1: CGPointMake(group.minX + 0.98821 * group.width, group.minY + 0.68178 * group.height), controlPoint2: CGPointMake(group.minX + 0.88231 * group.width, group.minY + 0.78161 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.73128 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.73128 * group.width, group.minY + 0.90763 * group.height), controlPoint2: CGPointMake(group.minX + 0.73128 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.26872 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.26872 * group.width, group.minY + 0.83283 * group.height), controlPoint1: CGPointMake(group.minX + 0.26872 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.26872 * group.width, group.minY + 0.90763 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.56522 * group.height), controlPoint1: CGPointMake(group.minX + 0.11769 * group.width, group.minY + 0.78161 * group.height), controlPoint2: CGPointMake(group.minX + 0.01179 * group.width, group.minY + 0.68178 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.56522 * group.height))
        bezier2Path.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.42291 * group.width, group.minY + 0.43478 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.38436 * group.width, group.minY + 0.26087 * group.height), controlPoint1: CGPointMake(group.minX + 0.42291 * group.width, group.minY + 0.43478 * group.height), controlPoint2: CGPointMake(group.minX + 0.46145 * group.width, group.minY + 0.34783 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.30727 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.30727 * group.width, group.minY + 0.17391 * group.height), controlPoint2: CGPointMake(group.minX + 0.30727 * group.width, group.minY + 0.13043 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.55782 * group.width, group.minY + 0.43478 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.51927 * group.width, group.minY + 0.26087 * group.height), controlPoint1: CGPointMake(group.minX + 0.55782 * group.width, group.minY + 0.43478 * group.height), controlPoint2: CGPointMake(group.minX + 0.59636 * group.width, group.minY + 0.34783 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.44218 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.44218 * group.width, group.minY + 0.17391 * group.height), controlPoint2: CGPointMake(group.minX + 0.44218 * group.width, group.minY + 0.13043 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()
    }

    public class func drawCanvas41(frame frame: CGRect = CGRectMake(7, 7, 28, 28)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)



        //// Bezier Drawing
        CGContextSaveGState(context)
        CGContextRotateCTM(context, -45 * CGFloat(M_PI) / 180)

        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(5.5, -10.25))
        bezierPath.addLineToPoint(CGPointMake(5.5, 10.25))
        bezierPath.addCurveToPoint(CGPointMake(0, 15.75), controlPoint1: CGPointMake(5.5, 13.29), controlPoint2: CGPointMake(3.04, 15.75))
        bezierPath.addCurveToPoint(CGPointMake(-5.5, 10.25), controlPoint1: CGPointMake(-3.04, 15.75), controlPoint2: CGPointMake(-5.5, 13.29))
        bezierPath.addLineToPoint(CGPointMake(-5.5, -10.25))
        bezierPath.addCurveToPoint(CGPointMake(0, -15.75), controlPoint1: CGPointMake(-5.5, -13.29), controlPoint2: CGPointMake(-3.04, -15.75))
        bezierPath.addCurveToPoint(CGPointMake(5.5, -10.25), controlPoint1: CGPointMake(3.04, -15.75), controlPoint2: CGPointMake(5.5, -13.29))
        bezierPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()

        CGContextRestoreGState(context)


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(-3.61, -11.17))
        oval2Path.addCurveToPoint(CGPointMake(-3.61, -3.39), controlPoint1: CGPointMake(-1.46, -9.02), controlPoint2: CGPointMake(-1.46, -5.54))
        oval2Path.addCurveToPoint(CGPointMake(-11.39, -3.39), controlPoint1: CGPointMake(-5.76, -1.24), controlPoint2: CGPointMake(-9.24, -1.24))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath()
        oval3Path.moveToPoint(CGPointMake(11.17, 3.33))
        oval3Path.addCurveToPoint(CGPointMake(11.17, 11.11), controlPoint1: CGPointMake(13.32, 5.48), controlPoint2: CGPointMake(13.32, 8.96))
        oval3Path.addCurveToPoint(CGPointMake(3.39, 11.11), controlPoint1: CGPointMake(9.02, 13.26), controlPoint2: CGPointMake(5.54, 13.26))
        RelicStyleKit.strokeColor.setStroke()
        oval3Path.lineWidth = 2
        oval3Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath()
        oval4Path.moveToPoint(CGPointMake(-0.61, -8.17))
        oval4Path.addCurveToPoint(CGPointMake(-0.61, -0.39), controlPoint1: CGPointMake(1.54, -6.02), controlPoint2: CGPointMake(1.54, -2.54))
        oval4Path.addCurveToPoint(CGPointMake(-8.39, -0.39), controlPoint1: CGPointMake(-2.76, 1.76), controlPoint2: CGPointMake(-6.24, 1.76))
        RelicStyleKit.strokeColor.setStroke()
        oval4Path.lineWidth = 2
        oval4Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCanvas42(frame frame: CGRect = CGRectMake(8, 7, 27, 28)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.36, frame.minY + 1, frame.width - 2.71, frame.height - 2)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.39706 * group.width, group.minY + 0.33346 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.39706 * group.width, group.minY + 0.03859 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.43823 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.39706 * group.width, group.minY + 0.01728 * group.height), controlPoint2: CGPointMake(group.minX + 0.41533 * group.width, group.minY + 0.00000 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.56177 * group.width, group.minY + 0.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.60294 * group.width, group.minY + 0.03859 * group.height), controlPoint1: CGPointMake(group.minX + 0.58451 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.60294 * group.width, group.minY + 0.01736 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.60294 * group.width, group.minY + 0.33346 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.87633 * group.width, group.minY + 0.18602 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.93269 * group.width, group.minY + 0.20003 * group.height), controlPoint1: CGPointMake(group.minX + 0.89608 * group.width, group.minY + 0.17537 * group.height), controlPoint2: CGPointMake(group.minX + 0.92124 * group.width, group.minY + 0.18151 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.99446 * group.width, group.minY + 0.29997 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.97927 * group.width, group.minY + 0.35257 * group.height), controlPoint1: CGPointMake(group.minX + 1.00583 * group.width, group.minY + 0.31836 * group.height), controlPoint2: CGPointMake(group.minX + 0.99895 * group.width, group.minY + 0.34195 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.70588 * group.width, group.minY + 0.50000 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.97927 * group.width, group.minY + 0.64743 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.99446 * group.width, group.minY + 0.70003 * group.height), controlPoint1: CGPointMake(group.minX + 0.99902 * group.width, group.minY + 0.65809 * group.height), controlPoint2: CGPointMake(group.minX + 1.00591 * group.width, group.minY + 0.68151 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.93269 * group.width, group.minY + 0.79997 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.87633 * group.width, group.minY + 0.81398 * group.height), controlPoint1: CGPointMake(group.minX + 0.92132 * group.width, group.minY + 0.81836 * group.height), controlPoint2: CGPointMake(group.minX + 0.89601 * group.width, group.minY + 0.82459 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.60294 * group.width, group.minY + 0.66654 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.60294 * group.width, group.minY + 0.96141 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.56177 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.60294 * group.width, group.minY + 0.98272 * group.height), controlPoint2: CGPointMake(group.minX + 0.58467 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.43823 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.39706 * group.width, group.minY + 0.96141 * group.height), controlPoint1: CGPointMake(group.minX + 0.41549 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.39706 * group.width, group.minY + 0.98264 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.39706 * group.width, group.minY + 0.66654 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.12367 * group.width, group.minY + 0.81398 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.06731 * group.width, group.minY + 0.79997 * group.height), controlPoint1: CGPointMake(group.minX + 0.10392 * group.width, group.minY + 0.82463 * group.height), controlPoint2: CGPointMake(group.minX + 0.07876 * group.width, group.minY + 0.81849 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.00554 * group.width, group.minY + 0.70003 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.02073 * group.width, group.minY + 0.64743 * group.height), controlPoint1: CGPointMake(group.minX + -0.00583 * group.width, group.minY + 0.68164 * group.height), controlPoint2: CGPointMake(group.minX + 0.00105 * group.width, group.minY + 0.65805 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.29412 * group.width, group.minY + 0.50000 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.02073 * group.width, group.minY + 0.35257 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00554 * group.width, group.minY + 0.29997 * group.height), controlPoint1: CGPointMake(group.minX + 0.00098 * group.width, group.minY + 0.34191 * group.height), controlPoint2: CGPointMake(group.minX + -0.00591 * group.width, group.minY + 0.31849 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.06731 * group.width, group.minY + 0.20003 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.12367 * group.width, group.minY + 0.18602 * group.height), controlPoint1: CGPointMake(group.minX + 0.07868 * group.width, group.minY + 0.18164 * group.height), controlPoint2: CGPointMake(group.minX + 0.10399 * group.width, group.minY + 0.17541 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.39706 * group.width, group.minY + 0.33346 * group.height))
        bezierPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawCanvas43(frame frame: CGRect = CGRectMake(6, 4, 30, 34)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.07, frame.minY + 0.96, frame.width - 2.14, frame.height - 1.91)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.50250 * group.width, group.minY + 0.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.64717 * group.width, group.minY + 0.27869 * group.height), controlPoint1: CGPointMake(group.minX + 0.50141 * group.width, group.minY + 0.10254 * group.height), controlPoint2: CGPointMake(group.minX + 0.52155 * group.width, group.minY + 0.21573 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.99750 * group.width, group.minY + 0.24812 * group.height), controlPoint1: CGPointMake(group.minX + 0.77278 * group.width, group.minY + 0.34166 * group.height), controlPoint2: CGPointMake(group.minX + 0.89576 * group.width, group.minY + 0.30021 * group.height))
        bezierPath.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.25188 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.79434 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.89717 * group.width, group.minY + 0.30233 * group.height), controlPoint2: CGPointMake(group.minX + 0.79434 * group.width, group.minY + 0.37407 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.74812 * group.height), controlPoint1: CGPointMake(group.minX + 0.79434 * group.width, group.minY + 0.62593 * group.height), controlPoint2: CGPointMake(group.minX + 0.89717 * group.width, group.minY + 0.69767 * group.height))
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.99750 * group.width, group.minY + 0.75188 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.64717 * group.width, group.minY + 0.72131 * group.height), controlPoint1: CGPointMake(group.minX + 0.89576 * group.width, group.minY + 0.69979 * group.height), controlPoint2: CGPointMake(group.minX + 0.77278 * group.width, group.minY + 0.65834 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.50250 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.52155 * group.width, group.minY + 0.78427 * group.height), controlPoint2: CGPointMake(group.minX + 0.50141 * group.width, group.minY + 0.89746 * group.height))
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.49750 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.35283 * group.width, group.minY + 0.72131 * group.height), controlPoint1: CGPointMake(group.minX + 0.49859 * group.width, group.minY + 0.89746 * group.height), controlPoint2: CGPointMake(group.minX + 0.47845 * group.width, group.minY + 0.78427 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00250 * group.width, group.minY + 0.75188 * group.height), controlPoint1: CGPointMake(group.minX + 0.22722 * group.width, group.minY + 0.65834 * group.height), controlPoint2: CGPointMake(group.minX + 0.10424 * group.width, group.minY + 0.69979 * group.height))
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.74812 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.20566 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.10283 * group.width, group.minY + 0.69767 * group.height), controlPoint2: CGPointMake(group.minX + 0.20566 * group.width, group.minY + 0.62593 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.25188 * group.height), controlPoint1: CGPointMake(group.minX + 0.20566 * group.width, group.minY + 0.37407 * group.height), controlPoint2: CGPointMake(group.minX + 0.10283 * group.width, group.minY + 0.30233 * group.height))
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.00250 * group.width, group.minY + 0.24812 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.35283 * group.width, group.minY + 0.27869 * group.height), controlPoint1: CGPointMake(group.minX + 0.10424 * group.width, group.minY + 0.30021 * group.height), controlPoint2: CGPointMake(group.minX + 0.22722 * group.width, group.minY + 0.34166 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.49750 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.47845 * group.width, group.minY + 0.21573 * group.height), controlPoint2: CGPointMake(group.minX + 0.49859 * group.width, group.minY + 0.10254 * group.height))
        bezierPath.miterLimit = 10;

        bezierPath.lineCapStyle = .Round;

        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.50055 * group.width, group.minY + 0.39066 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.53218 * group.width, group.minY + 0.45160 * group.height), controlPoint1: CGPointMake(group.minX + 0.50031 * group.width, group.minY + 0.41308 * group.height), controlPoint2: CGPointMake(group.minX + 0.50471 * group.width, group.minY + 0.43784 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.60879 * group.width, group.minY + 0.44492 * group.height), controlPoint1: CGPointMake(group.minX + 0.55965 * group.width, group.minY + 0.46537 * group.height), controlPoint2: CGPointMake(group.minX + 0.58654 * group.width, group.minY + 0.45631 * group.height))
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.60934 * group.width, group.minY + 0.44574 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.56437 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.58685 * group.width, group.minY + 0.45677 * group.height), controlPoint2: CGPointMake(group.minX + 0.56437 * group.width, group.minY + 0.47246 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.60934 * group.width, group.minY + 0.55426 * group.height), controlPoint1: CGPointMake(group.minX + 0.56437 * group.width, group.minY + 0.52754 * group.height), controlPoint2: CGPointMake(group.minX + 0.58685 * group.width, group.minY + 0.54323 * group.height))
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.60879 * group.width, group.minY + 0.55508 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.53218 * group.width, group.minY + 0.54840 * group.height), controlPoint1: CGPointMake(group.minX + 0.58654 * group.width, group.minY + 0.54369 * group.height), controlPoint2: CGPointMake(group.minX + 0.55965 * group.width, group.minY + 0.53463 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.50055 * group.width, group.minY + 0.60934 * group.height), controlPoint1: CGPointMake(group.minX + 0.50471 * group.width, group.minY + 0.56216 * group.height), controlPoint2: CGPointMake(group.minX + 0.50031 * group.width, group.minY + 0.58692 * group.height))
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.49945 * group.width, group.minY + 0.60934 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.46782 * group.width, group.minY + 0.54840 * group.height), controlPoint1: CGPointMake(group.minX + 0.49969 * group.width, group.minY + 0.58692 * group.height), controlPoint2: CGPointMake(group.minX + 0.49529 * group.width, group.minY + 0.56216 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.39121 * group.width, group.minY + 0.55508 * group.height), controlPoint1: CGPointMake(group.minX + 0.44035 * group.width, group.minY + 0.53463 * group.height), controlPoint2: CGPointMake(group.minX + 0.41346 * group.width, group.minY + 0.54369 * group.height))
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.39066 * group.width, group.minY + 0.55426 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.43563 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.41315 * group.width, group.minY + 0.54323 * group.height), controlPoint2: CGPointMake(group.minX + 0.43563 * group.width, group.minY + 0.52754 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.39066 * group.width, group.minY + 0.44574 * group.height), controlPoint1: CGPointMake(group.minX + 0.43563 * group.width, group.minY + 0.47246 * group.height), controlPoint2: CGPointMake(group.minX + 0.41315 * group.width, group.minY + 0.45677 * group.height))
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.39121 * group.width, group.minY + 0.44492 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.46782 * group.width, group.minY + 0.45160 * group.height), controlPoint1: CGPointMake(group.minX + 0.41346 * group.width, group.minY + 0.45631 * group.height), controlPoint2: CGPointMake(group.minX + 0.44035 * group.width, group.minY + 0.46537 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.49945 * group.width, group.minY + 0.39066 * group.height), controlPoint1: CGPointMake(group.minX + 0.49529 * group.width, group.minY + 0.43784 * group.height), controlPoint2: CGPointMake(group.minX + 0.49969 * group.width, group.minY + 0.41308 * group.height))
        bezier2Path.miterLimit = 10;

        bezier2Path.lineCapStyle = .Round;

        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()
    }

    public class func drawCanvas44(frame frame: CGRect = CGRectMake(9, 6, 22, 28)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.15, frame.minY + 0.73, frame.width - 2.41, frame.height - 1.47)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.99669 * group.width, group.minY + 0.24995 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.99669 * group.width, group.minY + 0.72897 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.60714 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.99669 * group.width, group.minY + 0.72897 * group.height), controlPoint2: CGPointMake(group.minX + 0.99669 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.28863 * group.width, group.minY + 0.93188 * group.height), controlPoint1: CGPointMake(group.minX + 0.40108 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.37577 * group.width, group.minY + 0.97216 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.04592 * group.width, group.minY + 0.57753 * group.height), controlPoint1: CGPointMake(group.minX + 0.20149 * group.width, group.minY + 0.89160 * group.height), controlPoint2: CGPointMake(group.minX + 0.09301 * group.width, group.minY + 0.64235 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.04592 * group.width, group.minY + 0.42858 * group.height), controlPoint1: CGPointMake(group.minX + -0.00118 * group.width, group.minY + 0.51271 * group.height), controlPoint2: CGPointMake(group.minX + -0.02798 * group.width, group.minY + 0.45503 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.15808 * group.width, group.minY + 0.45503 * group.height), controlPoint1: CGPointMake(group.minX + 0.08305 * group.width, group.minY + 0.41529 * group.height), controlPoint2: CGPointMake(group.minX + 0.13158 * group.width, group.minY + 0.41934 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.25855 * group.width, group.minY + 0.61223 * group.height), controlPoint1: CGPointMake(group.minX + 0.18458 * group.width, group.minY + 0.49072 * group.height), controlPoint2: CGPointMake(group.minX + 0.25855 * group.width, group.minY + 0.61223 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.26174 * group.width, group.minY + 0.13006 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.33301 * group.width, group.minY + 0.06594 * group.height), controlPoint1: CGPointMake(group.minX + 0.26174 * group.width, group.minY + 0.13006 * group.height), controlPoint2: CGPointMake(group.minX + 0.27602 * group.width, group.minY + 0.06594 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.43010 * group.width, group.minY + 0.11706 * group.height), controlPoint1: CGPointMake(group.minX + 0.39001 * group.width, group.minY + 0.06594 * group.height), controlPoint2: CGPointMake(group.minX + 0.43010 * group.width, group.minY + 0.09262 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.44220 * group.width, group.minY + 0.41934 * group.height), controlPoint1: CGPointMake(group.minX + 0.43010 * group.width, group.minY + 0.14150 * group.height), controlPoint2: CGPointMake(group.minX + 0.44220 * group.width, group.minY + 0.41934 * group.height))
        bezierPath.lineCapStyle = .Round;

        bezierPath.lineJoinStyle = .Round;

        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.63153 * group.width, group.minY + 0.42996 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.63153 * group.width, group.minY + 0.05085 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.53607 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.63153 * group.width, group.minY + 0.05085 * group.height), controlPoint2: CGPointMake(group.minX + 0.61326 * group.width, group.minY + 0.00000 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.43438 * group.width, group.minY + 0.08982 * group.height), controlPoint1: CGPointMake(group.minX + 0.45888 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.43438 * group.width, group.minY + 0.05870 * group.height))
        bezier2Path.lineCapStyle = .Round;

        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.81074 * group.width, group.minY + 0.45868 * group.height))
        bezier3Path.addLineToPoint(CGPointMake(group.minX + 0.81074 * group.width, group.minY + 0.09974 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.73042 * group.width, group.minY + 0.04516 * group.height), controlPoint1: CGPointMake(group.minX + 0.81074 * group.width, group.minY + 0.09974 * group.height), controlPoint2: CGPointMake(group.minX + 0.80597 * group.width, group.minY + 0.04516 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.63371 * group.width, group.minY + 0.10270 * group.height), controlPoint1: CGPointMake(group.minX + 0.65486 * group.width, group.minY + 0.04516 * group.height), controlPoint2: CGPointMake(group.minX + 0.63371 * group.width, group.minY + 0.07826 * group.height))
        bezier3Path.lineCapStyle = .Round;

        RelicStyleKit.strokeColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPointMake(group.minX + 0.99973 * group.width, group.minY + 0.25708 * group.height))
        bezier4Path.addCurveToPoint(CGPointMake(group.minX + 0.92446 * group.width, group.minY + 0.16112 * group.height), controlPoint1: CGPointMake(group.minX + 0.99973 * group.width, group.minY + 0.25708 * group.height), controlPoint2: CGPointMake(group.minX + 1.00863 * group.width, group.minY + 0.16112 * group.height))
        bezier4Path.addCurveToPoint(CGPointMake(group.minX + 0.82389 * group.width, group.minY + 0.19838 * group.height), controlPoint1: CGPointMake(group.minX + 0.84029 * group.width, group.minY + 0.16112 * group.height), controlPoint2: CGPointMake(group.minX + 0.82389 * group.width, group.minY + 0.17793 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezier4Path.lineWidth = 2
        bezier4Path.stroke()
    }

    public class func drawCanvas45(frame frame: CGRect = CGRectMake(5, 8, 30, 29)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 2, frame.minY + 2, frame.width - 2, frame.height - 1)


        //// Group
        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.67634 * group.width, group.minY + 0.25729 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.97553 * group.width, group.minY + 0.34549 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.78532 * group.width, group.minY + 0.59271 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.79389 * group.width, group.minY + 0.90451 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.80000 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.20611 * group.width, group.minY + 0.90451 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.21468 * group.width, group.minY + 0.59271 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.02447 * group.width, group.minY + 0.34549 * group.height))
        starPath.addLineToPoint(CGPointMake(group.minX + 0.32366 * group.width, group.minY + 0.25729 * group.height))
        starPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        starPath.lineWidth = 2
        starPath.stroke()
    }

    public class func drawCanvas46(frame frame: CGRect = CGRectMake(10, 8, 23, 24)) {

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(frame.minX + 15.39, frame.minY + 15.39))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 2.66, frame.minY + 20.34), controlPoint1: CGPointMake(frame.minX + 10.51, frame.minY + 20.27), controlPoint2: CGPointMake(frame.minX + 4.81, frame.minY + 22.49))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 7.61, frame.minY + 7.61), controlPoint1: CGPointMake(frame.minX + 0.51, frame.minY + 18.19), controlPoint2: CGPointMake(frame.minX + 2.73, frame.minY + 12.49))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 20.34, frame.minY + 2.66), controlPoint1: CGPointMake(frame.minX + 12.49, frame.minY + 2.73), controlPoint2: CGPointMake(frame.minX + 18.19, frame.minY + 0.51))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 15.39, frame.minY + 15.39), controlPoint1: CGPointMake(frame.minX + 22.49, frame.minY + 4.81), controlPoint2: CGPointMake(frame.minX + 20.27, frame.minY + 10.51))
        oval2Path.closePath()
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 1.22, frame.minY + 1.22))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 21.78, frame.minY + 21.78))
        bezierPath.miterLimit = 10;

        bezierPath.lineCapStyle = .Round;

        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawCanvas47(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group


        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 6, frame.minY + 6, 30, 29)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas45(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas48(frame frame: CGRect = CGRectMake(7, 11, 29, 18)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(frame.minX + 3.37, frame.minY + 8.99))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 14.5, frame.minY + 6), controlPoint1: CGPointMake(frame.minX + 5.45, frame.minY + 7.22), controlPoint2: CGPointMake(frame.minX + 9.65, frame.minY + 6))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 25.63, frame.minY + 8.99), controlPoint1: CGPointMake(frame.minX + 19.35, frame.minY + 6), controlPoint2: CGPointMake(frame.minX + 23.56, frame.minY + 7.22))
        oval2Path.moveToPoint(CGPointMake(frame.minX + 27, frame.minY + 11.5))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 14.5, frame.minY + 17), controlPoint1: CGPointMake(frame.minX + 27, frame.minY + 14.54), controlPoint2: CGPointMake(frame.minX + 21.4, frame.minY + 17))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 2.06, frame.minY + 12.04), controlPoint1: CGPointMake(frame.minX + 8.01, frame.minY + 17), controlPoint2: CGPointMake(frame.minX + 2.68, frame.minY + 14.83))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 14.5, frame.minY + 6.5)
        CGContextRotateCTM(context, 90 * CGFloat(M_PI) / 180)

        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(-5.5, -12.5, 11, 25))
        RelicStyleKit.strokeColor.setStroke()
        oval3Path.lineWidth = 2
        oval3Path.stroke()

        CGContextRestoreGState(context)


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath()
        oval4Path.moveToPoint(CGPointMake(frame.minX + 2.5, frame.minY + 13))
        oval4Path.addCurveToPoint(CGPointMake(frame.minX + 1, frame.minY + 9), controlPoint1: CGPointMake(frame.minX + 1.67, frame.minY + 13), controlPoint2: CGPointMake(frame.minX + 1, frame.minY + 11.21))
        oval4Path.addCurveToPoint(CGPointMake(frame.minX + 2.5, frame.minY + 5), controlPoint1: CGPointMake(frame.minX + 1, frame.minY + 6.79), controlPoint2: CGPointMake(frame.minX + 1.67, frame.minY + 5))
        RelicStyleKit.strokeColor.setStroke()
        oval4Path.lineWidth = 2
        oval4Path.stroke()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath()
        oval5Path.moveToPoint(CGPointMake(frame.minX + 26, frame.minY + 13))
        oval5Path.addCurveToPoint(CGPointMake(frame.minX + 27.5, frame.minY + 9), controlPoint1: CGPointMake(frame.minX + 26.83, frame.minY + 13), controlPoint2: CGPointMake(frame.minX + 27.5, frame.minY + 11.21))
        oval5Path.addCurveToPoint(CGPointMake(frame.minX + 26, frame.minY + 5), controlPoint1: CGPointMake(frame.minX + 27.5, frame.minY + 6.79), controlPoint2: CGPointMake(frame.minX + 26.83, frame.minY + 5))
        RelicStyleKit.strokeColor.setStroke()
        oval5Path.lineWidth = 2
        oval5Path.stroke()
    }

    public class func drawCanvas49(frame frame: CGRect = CGRectMake(18, 9, 7, 20)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY, frame.width - 2, frame.height - 1)


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.31579 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.31579 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.60000 * group.width, group.minY + 0.31579 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.60000 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.40000 * group.width, group.minY + 0.31579 * group.height), controlPoint2: CGPointMake(group.minX + 0.60000 * group.width, group.minY + 0.00000 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawCanvas50(frame frame: CGRect = CGRectMake(15, 8, 13, 25)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY + 3, frame.width - 2, frame.height - 4)


        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.73810 * group.height))
        oval2Path.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.88274 * group.height), controlPoint2: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 1.00000 * group.height))
        oval2Path.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.73810 * group.height), controlPoint1: CGPointMake(group.minX + 0.22386 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.88274 * group.height))
        oval2Path.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.59345 * group.height), controlPoint2: CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height))
        oval2Path.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.73810 * group.height), controlPoint1: CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.59345 * group.height))
        oval2Path.closePath()
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()
    }

    public class func drawCanvas51(frame frame: CGRect = CGRectMake(12, 7, 17, 28)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor((frame.width - 15.77) * 0.80259 - 0.49) + 0.99, frame.minY + floor((frame.height - 26.66) * 0.48750 - 0.19) + 0.69, 15.77, 26.66)


        //// Group
        //// Bezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, group.minX + 7.6, group.minY + 14.87)
        CGContextRotateCTM(context, 2.28 * CGFloat(M_PI) / 180)

        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(7.59, 4.18))
        bezierPath.addCurveToPoint(CGPointMake(-0.13, 11.49), controlPoint1: CGPointMake(7.71, 7.18), controlPoint2: CGPointMake(6.68, 11.22))
        bezierPath.addCurveToPoint(CGPointMake(-7.14, 5.32), controlPoint1: CGPointMake(-3.13, 11.61), controlPoint2: CGPointMake(-7.24, 8.77))
        bezierPath.addCurveToPoint(CGPointMake(-3.72, -5.67), controlPoint1: CGPointMake(-6.93, -2.25), controlPoint2: CGPointMake(-3.64, -0.05))
        bezierPath.addCurveToPoint(CGPointMake(-3.49, -9.69), controlPoint1: CGPointMake(-3.74, -7.05), controlPoint2: CGPointMake(-2.99, -8.14))
        bezierPath.addCurveToPoint(CGPointMake(-1.19, -3.5), controlPoint1: CGPointMake(-2.31, -6.84), controlPoint2: CGPointMake(-3.29, -5.25))
        bezierPath.addCurveToPoint(CGPointMake(0.98, -14.59), controlPoint1: CGPointMake(0.28, -5.45), controlPoint2: CGPointMake(0.37, -11.81))
        bezierPath.addCurveToPoint(CGPointMake(7.59, 4.18), controlPoint1: CGPointMake(-0.06, -6.57), controlPoint2: CGPointMake(7.47, 1.18))
        bezierPath.closePath()
        bezierPath.lineJoinStyle = .Round;

        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawCanvas29(frame frame: CGRect = CGRectMake(6, 5, 29, 31)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group 2
        //// Star Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 15, frame.minY + 23)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)

        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(0, -12.75))
        starPath.addLineToPoint(CGPointMake(6.95, 0))
        starPath.addLineToPoint(CGPointMake(0, 12.75))
        starPath.addLineToPoint(CGPointMake(-6.95, 0))
        starPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        starPath.lineWidth = 2
        starPath.stroke()

        CGContextRestoreGState(context)


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 10, frame.minY + 1, 10, 10))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()
    }

    public class func drawCanvas52(frame frame: CGRect = CGRectMake(10, 11, 23, 24)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY + 1, frame.width - 2, frame.height - 2)


        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.77273 + 0.5), floor(group.width * 0.95238 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.77273 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.61905 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.61905 + 0.5), floor(group.height * 0.36364 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval3Path.lineWidth = 2
        oval3Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.47619 * group.width, group.minY + 0.90953 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.47619 * group.width, group.minY + 0.53404 * group.height), controlPoint1: CGPointMake(group.minX + 0.47619 * group.width, group.minY + 0.90953 * group.height), controlPoint2: CGPointMake(group.minX + 0.47619 * group.width, group.minY + 0.62114 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.57761 * group.width, group.minY + 0.33994 * group.height), controlPoint1: CGPointMake(group.minX + 0.47619 * group.width, group.minY + 0.44693 * group.height), controlPoint2: CGPointMake(group.minX + 0.51468 * group.width, group.minY + 0.38910 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawCanvas53(frame frame: CGRect = CGRectMake(11, 5, 21, 31)) {

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(frame.minX + 14.39, frame.minY + 19.39))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 1.66, frame.minY + 24.34), controlPoint1: CGPointMake(frame.minX + 9.51, frame.minY + 24.27), controlPoint2: CGPointMake(frame.minX + 3.81, frame.minY + 26.49))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 6.61, frame.minY + 11.61), controlPoint1: CGPointMake(frame.minX - 0.49, frame.minY + 22.19), controlPoint2: CGPointMake(frame.minX + 1.73, frame.minY + 16.49))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 19.34, frame.minY + 6.66), controlPoint1: CGPointMake(frame.minX + 11.49, frame.minY + 6.73), controlPoint2: CGPointMake(frame.minX + 17.19, frame.minY + 4.51))
        oval2Path.addCurveToPoint(CGPointMake(frame.minX + 14.39, frame.minY + 19.39), controlPoint1: CGPointMake(frame.minX + 21.49, frame.minY + 8.81), controlPoint2: CGPointMake(frame.minX + 19.27, frame.minY + 14.51))
        oval2Path.closePath()
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 10.5, frame.minY + 0.97))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 10.5, frame.minY + 30.03))
        bezierPath.miterLimit = 10;

        bezierPath.lineCapStyle = .Square;

        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawCanvas54(frame frame: CGRect = CGRectMake(15, 8, 12, 28)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY + 1, frame.width - 2, frame.height - 2)


        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.00000 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), floor(group.height * 0.38462 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.38462 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 1.00000 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 1.00000 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.84619 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.90000 * group.width, group.minY + 0.84619 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()
    }

    public class func drawCanvas55(frame frame: CGRect = CGRectMake(7, 10, 28, 23)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1.03, frame.minY, frame.width - 2.06, frame.height - 1)


        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.54546 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.73128 * group.width, group.minY + 0.82523 * group.height), controlPoint1: CGPointMake(group.minX + 0.98821 * group.width, group.minY + 0.66731 * group.height), controlPoint2: CGPointMake(group.minX + 0.88231 * group.width, group.minY + 0.77168 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.73128 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.73128 * group.width, group.minY + 0.90344 * group.height), controlPoint2: CGPointMake(group.minX + 0.73128 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.26872 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.26872 * group.width, group.minY + 0.82523 * group.height), controlPoint1: CGPointMake(group.minX + 0.26872 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.26872 * group.width, group.minY + 0.90344 * group.height))
        bezier2Path.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.54546 * group.height), controlPoint1: CGPointMake(group.minX + 0.11769 * group.width, group.minY + 0.77168 * group.height), controlPoint2: CGPointMake(group.minX + 0.01179 * group.width, group.minY + 0.66731 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.54546 * group.height))
        bezier2Path.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.38436 - 0.47) + 0.97, group.minY + floor(group.height * 0.22727 + 0.5), floor(group.width * 0.46145 - 0.47) - floor(group.width * 0.38436 - 0.47), floor(group.height * 0.31818 + 0.5) - floor(group.height * 0.22727 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.50000 - 0.47) + 0.97, group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 0.57709 - 0.47) - floor(group.width * 0.50000 - 0.47), floor(group.height * 0.09091 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.61564 - 0.47) + 0.97, group.minY + floor(group.height * 0.36364 + 0.5), floor(group.width * 0.65418 - 0.47) - floor(group.width * 0.61564 - 0.47), floor(group.height * 0.40909 + 0.5) - floor(group.height * 0.36364 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval4Path.lineWidth = 2
        oval4Path.stroke()
    }

    public class func drawCanvas56(frame frame: CGRect = CGRectMake(4, 10, 34, 18)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY + 1, frame.width - 2, frame.height - 2)


        //// Group
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.21875 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.46405 * group.height), controlPoint1: CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.21875 * group.height), controlPoint2: CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.33638 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.76089 * group.width, group.minY + 0.25001 * group.height), controlPoint1: CGPointMake(group.minX + 0.68617 * group.width, group.minY + 0.42174 * group.height), controlPoint2: CGPointMake(group.minX + 0.73498 * group.width, group.minY + 0.34501 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.95281 * group.width, group.minY + 0.25000 * group.height), controlPoint1: CGPointMake(group.minX + 0.84216 * group.width, group.minY + 0.25000 * group.height), controlPoint2: CGPointMake(group.minX + 0.91057 * group.width, group.minY + 0.25000 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.99854 * group.width, group.minY + 0.25000 * group.height), controlPoint1: CGPointMake(group.minX + 0.98186 * group.width, group.minY + 0.25000 * group.height), controlPoint2: CGPointMake(group.minX + 0.99854 * group.width, group.minY + 0.25000 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.28571 * group.height), controlPoint1: CGPointMake(group.minX + 0.99951 * group.width, group.minY + 0.26179 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.27370 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.73537 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.50205 * group.height), controlPoint2: CGPointMake(group.minX + 0.84065 * group.width, group.minY + 0.68383 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.78125 * group.height), controlPoint1: CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.76393 * group.height), controlPoint2: CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.78125 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.51562 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.90206 * group.height), controlPoint2: CGPointMake(group.minX + 0.57603 * group.width, group.minY + 1.00000 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.78125 * group.height), controlPoint1: CGPointMake(group.minX + 0.45522 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.90206 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.74185 * group.height), controlPoint1: CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.78125 * group.height), controlPoint2: CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.76653 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.28571 * group.height), controlPoint1: CGPointMake(group.minX + 0.17492 * group.width, group.minY + 0.70110 * group.height), controlPoint2: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.51238 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.00146 * group.width, group.minY + 0.25000 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.27370 * group.height), controlPoint2: CGPointMake(group.minX + 0.00049 * group.width, group.minY + 0.26179 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.27037 * group.width, group.minY + 0.25000 * group.height), controlPoint1: CGPointMake(group.minX + 0.00146 * group.width, group.minY + 0.25000 * group.height), controlPoint2: CGPointMake(group.minX + 0.11748 * group.width, group.minY + 0.25000 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.46407 * group.height), controlPoint1: CGPointMake(group.minX + 0.29627 * group.width, group.minY + 0.34501 * group.height), controlPoint2: CGPointMake(group.minX + 0.34508 * group.width, group.minY + 0.42174 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.21875 * group.height), controlPoint1: CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.33638 * group.height), controlPoint2: CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.21875 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.51562 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.40625 * group.width, group.minY + 0.09794 * group.height), controlPoint2: CGPointMake(group.minX + 0.45522 * group.width, group.minY + 0.00000 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.21875 * group.height), controlPoint1: CGPointMake(group.minX + 0.57603 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.09794 * group.height))
        bezier3Path.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()
    }

    public class func drawCanvas57(frame frame: CGRect = CGRectMake(14, 6, 14, 29)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY, frame.width - 2, frame.height - 1)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.46429 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.75000 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.62208 * group.height), controlPoint2: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 0.75000 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.46429 * group.height), controlPoint1: CGPointMake(group.minX + 0.22386 * group.width, group.minY + 0.75000 * group.height), controlPoint2: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.62208 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00387 * group.width, group.minY + 0.42857 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.45219 * group.height), controlPoint2: CGPointMake(group.minX + 0.00132 * group.width, group.minY + 0.44027 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.99613 * group.width, group.minY + 0.42857 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.46429 * group.height), controlPoint1: CGPointMake(group.minX + 0.99868 * group.width, group.minY + 0.44027 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.45219 * group.height))
        bezierPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.71429 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.16667 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.83333 * group.width, group.minY + 1.00000 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.16667 + 0.5), group.minY + floor(group.height * 0.17857 + 0.5), floor(group.width * 0.33333 + 0.5) - floor(group.width * 0.16667 + 0.5), floor(group.height * 0.25000 + 0.5) - floor(group.height * 0.17857 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.41667 + 0.5), group.minY + floor(group.height * 0.00000 + 0.5), floor(group.width * 0.58333 + 0.5) - floor(group.width * 0.41667 + 0.5), floor(group.height * 0.07143 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalInRect: CGRectMake(group.minX + floor(group.width * 0.66667 + 0.5), group.minY + floor(group.height * 0.28571 + 0.5), floor(group.width * 0.75000 + 0.5) - floor(group.width * 0.66667 + 0.5), floor(group.height * 0.32143 + 0.5) - floor(group.height * 0.28571 + 0.5)))
        RelicStyleKit.strokeColor.setStroke()
        oval4Path.lineWidth = 2
        oval4Path.stroke()
    }

    public class func drawCanvas58(frame frame: CGRect = CGRectMake(14, 6, 14, 30)) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + 1, frame.minY, frame.width - 2, frame.height - 1)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.48276 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.75862 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.63511 * group.height), controlPoint2: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 0.75862 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.48276 * group.height), controlPoint1: CGPointMake(group.minX + 0.22386 * group.width, group.minY + 0.75862 * group.height), controlPoint2: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.63511 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 0.00387 * group.width, group.minY + 0.44828 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.47108 * group.height), controlPoint2: CGPointMake(group.minX + 0.00132 * group.width, group.minY + 0.45957 * group.height))
        bezierPath.addLineToPoint(CGPointMake(group.minX + 0.99613 * group.width, group.minY + 0.44828 * group.height))
        bezierPath.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.48276 * group.height), controlPoint1: CGPointMake(group.minX + 0.99868 * group.width, group.minY + 0.45957 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.47108 * group.height))
        bezierPath.closePath()
        RelicStyleKit.strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.72414 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.16667 * group.width, group.minY + 1.00000 * group.height))
        bezier2Path.addLineToPoint(CGPointMake(group.minX + 0.83333 * group.width, group.minY + 1.00000 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(group.minX + 0.33333 * group.width, group.minY + 0.34483 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.25000 * group.width, group.minY + 0.20690 * group.height), controlPoint1: CGPointMake(group.minX + 0.33333 * group.width, group.minY + 0.34483 * group.height), controlPoint2: CGPointMake(group.minX + 0.41667 * group.width, group.minY + 0.27586 * group.height))
        bezier3Path.addCurveToPoint(CGPointMake(group.minX + 0.08333 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.08333 * group.width, group.minY + 0.13793 * group.height), controlPoint2: CGPointMake(group.minX + 0.08333 * group.width, group.minY + 0.10345 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.34483 * group.height))
        bezier4Path.addCurveToPoint(CGPointMake(group.minX + 0.54167 * group.width, group.minY + 0.20690 * group.height), controlPoint1: CGPointMake(group.minX + 0.62500 * group.width, group.minY + 0.34483 * group.height), controlPoint2: CGPointMake(group.minX + 0.70833 * group.width, group.minY + 0.27586 * group.height))
        bezier4Path.addCurveToPoint(CGPointMake(group.minX + 0.37500 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.37500 * group.width, group.minY + 0.13793 * group.height), controlPoint2: CGPointMake(group.minX + 0.37500 * group.width, group.minY + 0.10345 * group.height))
        RelicStyleKit.strokeColor.setStroke()
        bezier4Path.lineWidth = 2
        bezier4Path.stroke()
    }

    public class func drawCanvas59(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group


        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, 42, 42)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height))
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(frame.minX + 6, frame.minY + 6, 30, 29)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        RelicStyleKit.drawCanvas45(frame: CGRectMake(0, 0, symbol2Rect.size.width, symbol2Rect.size.height))
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfCanvas1(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas1(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas1
    }

    public class func imageOfCanvas2(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas2(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas2 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas2
    }

    public class func imageOfCanvas3(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas3(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas3 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas3
    }

    public class func imageOfCanvas4(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas4(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas4 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas4
    }

    public class func imageOfCanvas5(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas5(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas5 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas5
    }

    public class func imageOfCanvas6(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas6(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas6 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas6
    }

    public class func imageOfCanvas7(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas7(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas7 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas7
    }

    public class func imageOfCanvas8(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas8(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas8 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas8
    }

    public class func imageOfCanvas9(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas9(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas9 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas9
    }

    public class func imageOfCanvas10(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas10(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas10 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas10
    }

    public class func imageOfCanvas11(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas11(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas11 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas11
    }

    public class func imageOfCanvas12(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas12(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas12 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas12
    }

    public class func imageOfCanvas13(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas13(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas13 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas13
    }

    public class func imageOfCanvas14(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas14(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas14 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas14
    }

    public class func imageOfCanvas15(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas15(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas15 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas15
    }

    public class func imageOfCanvas16(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas16(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas16 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas16
    }

    public class func imageOfCanvas17(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas17(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas17 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas17
    }

    public class func imageOfCanvas18(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas18(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas18 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas18
    }

    public class func imageOfCanvas19(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas19(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas19 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas19
    }

    public class func imageOfCanvas20(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas20(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas20 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas20
    }

    public class func imageOfCanvas21(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas21(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas21 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas21
    }

    public class func imageOfCanvas22(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas22(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas22 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas22
    }

    public class func imageOfCanvas23(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas23(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas23 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas23
    }

    public class func imageOfCanvas24(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas24(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas24 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas24
    }

    public class func imageOfCanvas25(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas25(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas25 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas25
    }

    public class func imageOfCanvas26(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas26(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas26 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas26
    }

    public class func imageOfCanvas27(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas27(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas27 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas27
    }

    public class func imageOfCanvas28(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas28(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas28 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas28
    }

    public class func imageOfCanvas30(frame frame: CGRect = CGRectMake(6, 13, 30, 16)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas30(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas30 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas30
    }

    public class func imageOfCanvas31(frame frame: CGRect = CGRectMake(8, 8, 25, 24)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas31(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas31 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas31
    }

    public class func imageOfCanvas32(frame frame: CGRect = CGRectMake(7, 7, 28, 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas32(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas32 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas32
    }

    public class func imageOfCanvas33(frame frame: CGRect = CGRectMake(8, 8, 26, 26)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas33(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas33 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas33
    }

    public class func imageOfCanvas34(frame frame: CGRect = CGRectMake(10, 8, 23, 25)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas34(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas34 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas34
    }

    public class func imageOfCanvas35(frame frame: CGRect = CGRectMake(12, 11, 18, 19)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas35(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas35 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas35
    }

    public class func imageOfCanvas36(frame frame: CGRect = CGRectMake(13, 7, 15, 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas36(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas36 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas36
    }

    public class func imageOfIconFrame(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawIconFrame(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfIconFrame = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfIconFrame
    }

    public class func imageOfCanvas37(frame frame: CGRect = CGRectMake(7, 7, 27, 27)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas37(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas37 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas37
    }

    public class func imageOfCanvas38(frame frame: CGRect = CGRectMake(6, 6, 30, 30)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas38(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas38 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas38
    }

    public class func imageOfCanvas39(frame frame: CGRect = CGRectMake(4, 9, 34, 22)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas39(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas39 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas39
    }

    public class func imageOfCanvas40(frame frame: CGRect = CGRectMake(7, 10, 28, 24)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas40(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas40 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas40
    }

    public class func imageOfCanvas41(frame frame: CGRect = CGRectMake(7, 7, 28, 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas41(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas41 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas41
    }

    public class func imageOfCanvas42(frame frame: CGRect = CGRectMake(8, 7, 27, 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas42(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas42 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas42
    }

    public class func imageOfCanvas43(frame frame: CGRect = CGRectMake(6, 4, 30, 34)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas43(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas43 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas43
    }

    public class func imageOfCanvas44(frame frame: CGRect = CGRectMake(9, 6, 22, 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas44(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas44 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas44
    }

    public class func imageOfCanvas45(frame frame: CGRect = CGRectMake(5, 8, 30, 29)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas45(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas45 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas45
    }

    public class func imageOfCanvas46(frame frame: CGRect = CGRectMake(10, 8, 23, 24)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas46(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas46 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas46
    }

    public class func imageOfCanvas47(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas47(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas47 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas47
    }

    public class func imageOfCanvas48(frame frame: CGRect = CGRectMake(7, 11, 29, 18)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas48(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas48 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas48
    }

    public class func imageOfCanvas49(frame frame: CGRect = CGRectMake(18, 9, 7, 20)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas49(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas49 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas49
    }

    public class func imageOfCanvas50(frame frame: CGRect = CGRectMake(15, 8, 13, 25)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas50(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas50 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas50
    }

    public class func imageOfCanvas51(frame frame: CGRect = CGRectMake(12, 7, 17, 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas51(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas51 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas51
    }

    public class func imageOfCanvas29(frame frame: CGRect = CGRectMake(6, 5, 29, 31)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas29(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas29 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas29
    }

    public class func imageOfCanvas52(frame frame: CGRect = CGRectMake(10, 11, 23, 24)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas52(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas52 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas52
    }

    public class func imageOfCanvas53(frame frame: CGRect = CGRectMake(11, 5, 21, 31)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas53(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas53 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas53
    }

    public class func imageOfCanvas54(frame frame: CGRect = CGRectMake(15, 8, 12, 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas54(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas54 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas54
    }

    public class func imageOfCanvas55(frame frame: CGRect = CGRectMake(7, 10, 28, 23)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas55(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas55 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas55
    }

    public class func imageOfCanvas56(frame frame: CGRect = CGRectMake(4, 10, 34, 18)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas56(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas56 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas56
    }

    public class func imageOfCanvas57(frame frame: CGRect = CGRectMake(14, 6, 14, 29)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas57(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas57 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas57
    }

    public class func imageOfCanvas58(frame frame: CGRect = CGRectMake(14, 6, 14, 30)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas58(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas58 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas58
    }

    public class func imageOfCanvas59(frame frame: CGRect = CGRectMake(0, 0, 42, 42)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            RelicStyleKit.drawCanvas59(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))

        let imageOfCanvas59 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCanvas59
    }

}
